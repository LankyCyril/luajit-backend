diff --git a/Makefile b/Makefile
index a68ff47..2191e6e 100644
--- a/Makefile
+++ b/Makefile
@@ -23,8 +23,8 @@
 #
 # ------------------------------------------------------------------------------
 
-MAKEFILE_IN = Makefile.in
-include $(MAKEFILE_IN)
+CC = mpicc
+LUA_HOME = ../../luajit/src/
 
 CFLAGS ?= -Wall -shared -fPIC
 CURL ?= curl
@@ -34,8 +34,8 @@ RM ?= rm -f
 OS ?= generic
 LVER ?= lua-5.2.1
 
-LUA_I ?= -I$(LUA_HOME)/include
-LUA_L ?= -L$(LUA_HOME)/lib -llua
+LUA_I ?= -I$(LUA_HOME)
+LUA_L ?= -L$(LUA_HOME) -lluajit
 
 
 default : main MPI.so buffer.so
@@ -62,7 +62,7 @@ main.o : main.c
 	$(CC) $(CFLAGS) -c -o $@ $< $(LUA_I)
 
 main : main.o lua-mpi.o buffer.o
-	$(CC) -o $@ $^ $(LUA_L)
+	$(CC) -o $@ $^ $(LUA_L) $(LUA_I)
 
 clean :
 	$(RM) *.o mpifuncs.c main
diff --git a/buffer.c b/buffer.c
index 43dcc03..48b5b20 100644
--- a/buffer.c
+++ b/buffer.c
@@ -7,6 +7,12 @@
 #include "lualib.h"
 #include "lauxlib.h"
 
+
+typedef size_t lua_Unsigned;
+#define luaL_checkunsigned(L, a) ((lua_Unsigned)luaL_checkinteger((L), (a)))
+#define lua_rawlen(L, i) lua_objlen((L), (i))
+
+
 enum { 
   BUFFER_TYPE_INT=1,
   BUFFER_TYPE_CHAR=2,
diff --git a/main.c b/main.c
index 04d6be6..d23b06e 100644
--- a/main.c
+++ b/main.c
@@ -8,6 +8,45 @@
 int luaopen_buffer(lua_State *L);
 int luaopen_MPI(lua_State *L);
 
+// These backports are c.o. https://github.com/keplerproject/lua-compat-5.3
+#define lua_getfield(L, i, k) (lua_getfield((L), (i), (k)), lua_type((L), -1))
+LUALIB_API int lua_absindex (lua_State *L, int i) {
+    if (i < 0 && i > LUA_REGISTRYINDEX)
+        i += lua_gettop(L) + 1;
+    return i;
+}
+LUALIB_API int luaL_getsubtable (lua_State *L, int i, const char *name) {
+    int abs_i = lua_absindex(L, i);
+    luaL_checkstack(L, 3, "not enough stack slots");
+    lua_pushstring(L, name);
+    lua_gettable(L, abs_i);
+    if (lua_istable(L, -1))
+        return 1;
+    lua_pop(L, 1);
+    lua_newtable(L);
+    lua_pushstring(L, name);
+    lua_pushvalue(L, -2);
+    lua_settable(L, abs_i);
+    return 0;
+}
+LUALIB_API void luaL_requiref (lua_State *L, const char *modname, lua_CFunction openf, int glb) {
+    luaL_checkstack(L, 3, "not enough stack slots available");
+    luaL_getsubtable(L, LUA_REGISTRYINDEX, "_LOADED");
+    if (lua_getfield(L, -1, modname) == LUA_TNIL) {
+        lua_pop(L, 1);
+        lua_pushcfunction(L, openf);
+        lua_pushstring(L, modname);
+        lua_call(L, 1, 1);
+        lua_pushvalue(L, -1);
+        lua_setfield(L, -3, modname);
+    }
+    if (glb) {
+        lua_pushvalue(L, -1);
+        lua_setglobal(L, modname);
+    }
+    lua_replace(L, -2);
+}
+
 
 int main(int argc, char **argv)
 {
diff --git a/readspec.py b/readspec.py
index ab3a3db..64801a8 100644
--- a/readspec.py
+++ b/readspec.py
@@ -170,15 +170,15 @@ for spec in os.listdir('specs'):
 
 for func in luampi_funcs:
     try:
-        print func.write()
+        print(func.write())
         wrapped_funcs.append(func.func_name)
-    except ValueError as e:
+    except ValueError:
         pass #print e
 
-print "luaL_Reg MPI_module_funcs[] = {"
+print("luaL_Reg MPI_module_funcs[] = {")
 for func in wrapped_funcs + mpi_byhandfuncs:
-    print "  { \"%s\", _%s}," % (func.replace('MPI_', ''), func)
-print "  {NULL, NULL}};"
+    print("  { \"%s\", _%s}," % (func.replace('MPI_', ''), func))
+print("  {NULL, NULL}};")
 
 
 
